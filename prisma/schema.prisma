// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// USUARIO ADMINIDTRADOR
model User {
  id Int  @id @default(autoincrement())
  usuario String @unique
  password String
}

// TABLA DE ROLES
model Roles {
  id_rol Int @id @default(autoincrement())
  n_rol String
  abrev String
  deta_perm De_permiso[]
  usuarios Usuario[]
}

model Permisos {
  id_per Int @id @default(autoincrement())
  n_per String
  abrev String?
  DetaPerm De_permiso[]
}

model De_permiso {
  id_Dper Int @id @default(autoincrement())
  id_rol Int 
  id_per Int
  estado Boolean 
  permisos Permisos @relation(fields: [id_per], references: [id_per])
  roles Roles @relation(fields: [id_rol], references: [id_rol])
}

model Usuario {
  dni       String @db.Char(8)
  n_usu     String  
  estado    Boolean @default(true)
  password  String
  rol_id    Int   
  id_sub    Int   
  @@id([dni, rol_id, id_sub]) // Clave primaria compuesta
  @@unique([dni, rol_id, id_sub])  // Unicidad en la combinaci√≥n
  rol       Roles   @relation(fields: [rol_id], references: [id_rol])
  sub_uni   Oficina @relation(fields: [id_sub], references: [id_subUni])
}

model Oficina {
  id_subUni Int @id @default(autoincrement())
  n_subUni  String
  abrev     String
  usuar     Usuario []
}
